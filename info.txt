Running Indefinitely:
When you want your script to run indefinitely, there are a few options:

In VSCode:
You can run your script directly in VSCode, and it will keep running until you manually stop it.
Open your script in VSCode, and use the "Run Python File in Terminal" option (usually by right-clicking on the script and selecting it).

Command Line:
Open a terminal or command prompt and navigate to the directory where your script is located.
Run your script using the command 
    ``` bash
    python send_email.py

Background Process:
You can run your script as a background process to detach it from the terminal.
On Unix-based systems, you can use the `nohup` command: 
    ``` bash
    nohup python your_script.py &
On Windows, you can use the `start`:
    ``` bash
    command: start python your_script.py


Using taskkill Command:
Open a new Command Prompt window.

Use the tasklist command to find the process ID (PID) of the Python process:

bash
Copy code
tasklist | find "python"
Look for the entry related to your script and note its PID.

Use the taskkill command to terminate the process using its PID:

bash
Copy code
taskkill /F /PID <PID>
Replace <PID> with the actual process ID you obtained in step 2.



SCHEDULERS:
    
1. Windows Task Scheduler:
Description: Windows Task Scheduler is a built-in task scheduling application in Microsoft Windows. It allows you to schedule tasks to run at specific times or events.
How to Use: You can create a task in Windows Task Scheduler that runs your Python script at the desired time. Set the trigger to daily at 8 am, for example.
2. Cron (Unix-based Systems):
Description: Cron is a time-based job scheduler in Unix-like operating systems. It allows you to schedule tasks to run at specific intervals.
How to Use: You can add an entry to the crontab file to schedule your Python script. For example, to run the script every day at 8 am:
ruby
Copy code
0 8 * * * /path/to/python /path/to/your_script.py


OTHER SERVICES:

If you don't have access to a dedicated server or always-on machine, and you want a free solution to schedule your script, you might consider:

Google Colab:

You can upload your script to Google Colab and use Colab's runtime scheduling feature to run it at specific intervals.
GitHub Actions:

You can use GitHub Actions to schedule the execution of your script. Create a GitHub repository, add your script, and set up a workflow with a scheduled trigger.
Heroku (Free Tier):

Heroku allows you to deploy and run Python scripts. You can use the free tier, but note that there might be limitations on the number of hours your application can run per day.